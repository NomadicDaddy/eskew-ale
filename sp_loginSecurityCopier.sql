set quoted_identifier on ;
set ansi_nulls on ;
go

use [master] ;
go

if exists (select 1 from INFORMATION_SCHEMA.ROUTINES where [routine_schema] = 'dbo' and [routine_name] = 'sp_loginSecurityCopier')
	drop procedure dbo.[sp_loginSecurityCopier] ;
go

create procedure dbo.[sp_loginSecurityCopier] (
	@login nvarchar(128) = null,
	@target nvarchar(128) = null,
	@path nvarchar(max) = null,
	@overwrite tinyint = 1
)
as
begin

-----------------------------------------------------------------------------------------------------------------------
-- Procedure:	sp_loginSecurityCopier
-- Author:		Phillip Beazley (phillip@beazley.org)
-- Date:		01/05/2015
--
-- Purpose:		Generates a script duplicating the permissions of a given user.
--
-- Notes:		n/a
--
-- Depends:		n/a
--
-- REVISION HISTORY ---------------------------------------------------------------------------------------------------
-- 06/05/2012	lordbeazley	Initial creation.
-- 06/05/2012	lordbeazley	Added DB exists check on target.
-- 06/13/2012	lordbeazley	Added creation of login on target.
-- 06/13/2012	lordbeazley	Skip adding to target databases not a member of on the source.
-- 11/06/2012	lordbeazley	Fixed missing database-specific connect permissions and roles.
-- 11/08/2012	lordbeazley	Added re-link step.
-- 12/13/2012	lordbeazley	Added target login, handling of Windows vs. SQL logins.
-- 01/23/2013	lordbeazley	Minor ANSI standard compliance changes.
-- 02/20/2014	lordbeazley	Added option to output to path as textfile.
-- 01/05/2015	lordbeazley	Added option to overwrite existing output file (default).
-----------------------------------------------------------------------------------------------------------------------

set nocount on ;

-- user check
if (@login is null) set @login = suser_sname() ;
if not exists (select 1 from sys.syslogins where [name] = @login)
begin
    raiserror (':: specified login (%s) does not exist', 16, 1, @login) with nowait ;
    return ;
end

if (@overwrite = 1) set @overwrite = 2 else set @overwrite = 8 ;

set @target = Coalesce(@target, @login) ;

declare @dbName nvarchar(128) ;
declare @lines table([ln] int identity(1, 1) not null, [line] nvarchar(max)) ;

insert into @lines values ('-----------------------------------------------------------------------------------------------------------------------') ;
insert into @lines values ('-- Generated By:    sp_loginSecurityCopier') ;
insert into @lines values ('-- Generated On:    ' + Convert(varchar(19), getdate(), 120)) ;
insert into @lines values ('--') ;
insert into @lines values ('-- Purpose:         Run this script to duplicate the permissions of ' + QuoteName(@login) + ' from ' + QuoteName(Convert(varchar, serverproperty('servername'))) + '.') ;
insert into @lines values ('--') ;
insert into @lines values ('-- Notes:           Because the target server may not have all the databases the source does, we check to make sure') ;
insert into @lines values ('--                  they exist first. By doing that, we can run the script as-is on any target server without errors.') ;
insert into @lines values ('-----------------------------------------------------------------------------------------------------------------------') ;
insert into @lines values ('') ;
insert into @lines values ('set nocount on ;') ;
insert into @lines values ('use [master] ;') ;
insert into @lines values ('go') ;
insert into @lines values ('') ;

-- user check
insert into @lines values ('-- user check') ;
insert into @lines values ('if not exists (select 1 from sys.server_principals where [name] = ' + QuoteName(Coalesce(@target, @login), '''') + ')') ;
insert into @lines values ('begin') ;
insert into @lines
select
	[x] =
		case
			when ([p].[type] = 'S' and @target not like '%\%')
				then '    create login ' + QuoteName(Coalesce(@target, [p].[name])) + ' with password = ' + master.sys.fn_varbintohexstr([l].[password_hash]) + ' hashed, sid = ' + master.sys.fn_varbintohexstr([p].[sid]) + ', default_database = ' + QuoteName([p].[default_database_name]) + ', check_policy = ' + case [l].[is_policy_checked] when 1 then 'on' when 0 then 'off' else null end	+ ', check_expiration = ' + case [l].[is_expiration_checked] when 1 then 'on' when 0 then 'off' else null end + ' ;'
			when ([p].[type] in ('U', 'G') or @target like '%\%')
				then '    create login ' + QuoteName(Coalesce(@target, [p].[name])) + ' from windows with default_database = ' + QuoteName([p].[default_database_name]) + ' ;'
			else ''
		end
from
	master.sys.server_principals [p]
	left outer join master.sys.sql_logins [l]
		on [p].[principal_id] = [l].[principal_id]
where
	[p].[type] in ('S', 'U', 'G')
	and [p].[name] = @login ;
insert into @lines select [x] = '    alter login ' + QuoteName(Coalesce(@target, [name])) + ' disable ;' from master.sys.server_principals where [name] = @login and [is_disabled] = 1 ;
insert into @lines values ('end') ;
insert into @lines values ('') ;

-- server-level security
insert into @lines values ('-- server-level security') ;
insert into @lines
select
	[x] = Lower([rm].[state_desc]) + ' ' + Lower([rm].[permission_name]) + ' to ' + Coalesce(QuoteName(@target), Cast(QuoteName([u].[name] collate database_default) as nvarchar(256))) + ' ;'
from
	sys.server_permissions [rm]
	inner join sys.server_principals [u]
		on [rm].[grantee_principal_id] = [u].[principal_id]
where
	[u].[name] = @login
order by
	[rm].[permission_name] asc ;
insert into @lines values ('') ;

-- server roles
insert into @lines values ('-- server roles') ;
insert into @lines
select
	[x] = 'exec master..sp_addsrvrolemember @loginame = N' + QuoteName(Coalesce(@target, [m].[name]), '''') + ', @rolename = N' + QuoteName([r].[name], '''') + ' ;'
from
	sys.server_role_members [rm]
	inner join sys.server_principals [r]
		on [rm].[role_principal_id] = [r].[principal_id]
	inner join sys.server_principals [m]
		on [rm].[member_principal_id] = [m].[principal_id]
where
	[m].[name] = @login ;
insert into @lines values ('') ;

-- create list of databases
declare dbCursor cursor local fast_forward for
select
	[name]
from
	master..sysdatabases
where
	DatabasePropertyEx([name], 'Status') = 'ONLINE'
	and [name] not in ('tempdb')
order by
	[name] asc ;
open dbCursor ;
fetch next from dbCursor into @dbName ;

declare
	@sql nvarchar(max),
	@indb bit ;

-- create database loop
while @@fetch_status = 0
begin

	set @sql = N'use ' + QuoteName(@dbName) + N' ; select @indb = Coalesce(1, 0) from sys.sysusers where [name] = ' + QuoteName(@login, '''') + N' ;' ;
	set @indb = null ;
	exec sp_executesql @sql, N'@dbName nvarchar(128), @login nvarchar(128), @indb bit output', @dbName = @dbName, @login = @login, @indb = @indb output ;
	if (@indb = 1)
	begin

		insert into @lines values ('-- ' + QuoteName(@dbName) + ' --') ;
		insert into @lines values ('if exists (select 1 from [master].[dbo].[sysdatabases] where [name] = ' + QuoteName(@dbName, '''') + ')') ;
		insert into @lines values ('begin') ;
		insert into @lines values ('') ;
		insert into @lines values ('    use ' + QuoteName(@dbName) + ' ;') ;
		insert into @lines values ('') ;

		-- create database user for specified login
		insert into @lines values ('    -- create database user') ;
		insert into @lines values ('    if not exists (select 1 from sys.sysusers where [name] = ' + QuoteName(@target, '''') + ')') ;
		insert into @lines values ('        create user ' + QuoteName(@target) + ' for login ' + QuoteName(@target) + ' ;') ;
		insert into @lines values ('') ;

		-- re-link login
		insert into @lines values ('    -- re-link login') ;
		insert into @lines values ('    exec sp_change_users_login ''Auto_Fix'', ' + QuoteName(@target, '''') + ' ;') ;
		insert into @lines values ('') ;

		-- database connect permissions
		insert into @lines values ('    -- database connect permissions') ;
		insert into @lines
		exec('
			use [' + @dbName + '] ;
			select
				[x] = ''    '' + Lower([p].[state_desc]) + '' '' + Lower([p].[permission_name]) + '' to ['' + ''' + @target + ''' + '']'' + case when [p].[state] = ''W'' then '' with GRANT OPTION'' else '''' end + '' ;''
			from
				sys.database_permissions [p]
				inner join sys.database_principals [u]
					on [p].grantee_principal_id = [u].[principal_id]
			where
				[p].[major_id] = 0
				and [u].[name] = ''' + @login + '''
			order by
				[p].[permission_name] asc,
				[p].[state_desc] asc ;
		') ;
		insert into @lines values ('') ;

		-- database-specific roles
		insert into @lines values ('    -- database-specific roles') ;
		insert into @lines
		exec('
			use [' + @dbName + '] ;
			select
				[x] = ''    exec sp_addrolemember @rolename = '' + QuoteName(USER_NAME([rm].[role_principal_id]), '''''''') + '', @membername = '' + QuoteName(''' + @target + ''', '''''''') + '' ;''
			from
				sys.database_role_members [rm]
			where
				USER_NAME([rm].[member_principal_id]) = ''' + @login + '''
			order by
				[rm].[role_principal_id] asc ;
		') ;
		insert into @lines values ('') ;

		-- explicit object permissions
		insert into @lines values ('    -- explicit object permissions') ;
		insert into @lines
		exec('
			use [' + @dbName + '] ;
			select
				[x] = ''    '' + Lower([r].[state_desc]) + '' '' + Lower([r].[permission_name]) + '' on ['' + db_name() + ''].['' + schema_name([o].[schema_id]) + ''].['' + [o].[name] + ''] to [' + @target + '] ;'' collate database_default
			from
				sys.database_permissions [r]
				left outer join sys.database_Principals [u]
					on [r].[grantee_principal_id] = [u].[principal_id]
				left outer join sys.all_objects [o]
					on [o].[object_id] = [r].[major_id]
			where
				[r].[class_desc] <> ''DATABASE''
				and [u].[name] = ''' + @login + ''' ;
		') ;
		insert into @lines values ('') ;

		insert into @lines values ('end') ;
		insert into @lines values ('') ;

	end

	-- get next database
	fetch next from dbCursor into @dbName ;
end

-- close and deallocate cursor
close dbCursor ;
deallocate dbCursor ;

if (@path is not null)
begin

	-- check for trailing slash, correct if needed
	if (Right(@path, 1) <> '\') set @path = @path + '\' ;

	-- check for '\' in username, change to user@domain
	if (@target like '%\%') set @target = Right(@target, Len(@target) - CharIndex('\', @target)) + '@' + Left(@target, CharIndex('\', @target) - 1) ;

	declare @saveAs nvarchar(max) = @path + @target + '.sql' ;
	declare @rs int, @fso int, @fid int ;

	exec @rs = sp_OACreate 'Scripting.FileSystemObject', @fso out ;
	if @rs <> 0 print '!! failed to initialize' ;

	exec @rs = sp_OAMethod @fso, 'OpenTextFile', @fid out, @saveAs, @overwrite, 1 ;
	if @rs <> 0 print '!! failed to open' ;

	declare @line nvarchar(max) ;
	declare lnCursor cursor local fast_forward for
	select [line] from @lines order by [ln] asc ;
	open lnCursor ;
	fetch next from lnCursor into @line ;
	while @@fetch_status = 0
	begin

		exec @rs = sp_OAMethod @fid, 'WriteLine', null, @line ;
		if @rs <> 0 print '!! failed to write file' ;

		fetch next from lnCursor into @line ;
	end
	close lnCursor ;
	deallocate lnCursor ;

	exec @rs = sp_OADestroy @fid ;
	exec @rs = sp_OADestroy @fso ;

end
else
begin

	-- show perms
	select [line] from @lines order by [ln] asc ;

end

end
go

exec sp_MS_marksystemobject 'sp_loginSecurityCopier' ;
go
return ;

-- EXAMPLES
exec [sp_loginSecurityCopier] ;
--exec [sp_loginSecurityCopier] @login = 'sa' ;
--exec [sp_loginSecurityCopier] @login = 'someguy', @target = 'OTHERSERVER' ;
--exec [sp_loginSecurityCopier] @login = 'someguy', @path = '\\FILESHARE\sql_backups\users\' ;
--exec [sp_loginSecurityCopier] @login = 'DOMAIN\USER', @path = '\\FILESHARE\sql_backups\users\' ;
